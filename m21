#!/usr/bin/python

from optparse import OptionParser
import re
import m21utils as m21
from m21options import OPTIONS, GRAPHICAL_ANALYSIS_OPTIONS
import tools
from app import main

# PROGRAMA PRINCIPAL
PROG = "M21"
VERSION = "0.0.1"
description = "For computer assisted musicology and composition"
parser = OptionParser(usage='usage: %prog [OPTIONS, [ARGS]]',
                      version='%s %s' % (PROG, VERSION),
                      description=description)


# From a list, create options
#   - transform '-' strings in '_'
#   - if option not have type None, create a options with no argument
#   - else if option is 'measures', it must have more than 1 argument
#   - else create  a option with 1 argument
for word in OPTIONS:
    v = "_".join(word[1].split("-"))
    a = "-%s" % word[0]
    b = "--%s" % word[1]
    if word[2] is not None:
        parser.add_option(a,
                          b,
                          action=word[2],
                          help=word[3],
                          dest=v,
                          default=False)
    elif word[1] == "measures":
        parser.add_option(a,
                          b,
                          action=word[2],
                          help=word[3],
                          dest=v,
                          default=False,
                          nargs=2)
    else:
        parser.add_option(a,
                          b,
                          help=word[3],
                          dest=v,
                          default=False)

# Graphical analysis options,
# according in music21

for string in GRAPHICAL_ANALYSIS_OPTIONS:
    substrings = [s for s in re.findall('[A-Z][a-z0-9]*', string)]
    s = "_".join('%s' % (ss[0].lower()+ss[1:]) for ss in substrings)
    ss = "-".join('%s' % (ss[0].lower()+ss[1:]) for ss in substrings)
    parser.add_option("--%s" % (ss),
                      action="store_true",
                      dest=s,
                      default=False,
                      help="analysis graph with %s class" % (string))


# Capturar os argumentos passados pelo
(options, args) = parser.parse_args()

# GUI
if(options.gui):
    main(
        geometry="250x150+300+300",
        title="{} - {} ".format(PROG, VERSION)
    )

# Stream: peca composta, analise, inversao etc.
# Resultado final do procedimento
_stream = None

# On Search
if(options.search_only):
    for data in m21.search_only(options):
        print(data)

# On get
if(options.xml or
   options.tinynotation or
   (options.composer and options.index and not options.search_only)):
    _stream = m21.get(options)

# On CAC
if(options.CAC and options.glitch):
    _stream = m21.glitch(_stream, options)

# On reverse or inverse
if(options.transpose or options.invert):
    m21.invert_and_or_transpose(_stream, options)

# On Analisis
# for key, value in options.__dict__.iteritems():
for key, value in options.__dict__.items():
    if key.startswith('plot'):
        if(options.__dict__[key]):
            _type = ''.join([ss[0].upper()+ss[1:] for ss in key.split("_")])
            m21.plot(_stream, _type)

if(options.measures):
    print(options)
    _stream = m21.select_measures(_stream, options)

if(options.reducte):
    _stream = m21.reducte_piano(_stream, options)


# On show
if(options.show):
    print(_stream)
    m21.show(_stream, options)

if(options.lytexify):
    tools.lytexify(options.lytexify)
